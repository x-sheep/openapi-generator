// Extensions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension Bool: ParameterConvertible {}
extension Float: ParameterConvertible {}
extension Int: ParameterConvertible {}
extension Int32: ParameterConvertible {}
extension Int64: ParameterConvertible {}
extension Double: ParameterConvertible {}

extension ParameterConvertible where Self: LosslessStringConvertible & Encodable {
    func asParameter(codableHelper: CodableHelper) -> ParameterField { .string(String(self)) }
}

extension Decimal: ParameterConvertible {
    func asParameter(codableHelper: CodableHelper) -> ParameterField { .string(String(describing: self)) }
}

extension String: ParameterConvertible {
    func asParameter(codableHelper: CodableHelper) -> ParameterField { .string(self) }
}

extension URL: ParameterConvertible {
    func asParameter(codableHelper: CodableHelper) -> ParameterField {
        isFileURL ? .file(self) : .string(String(describing: self))
    }
}

extension UUID: ParameterConvertible {
    func asParameter(codableHelper: CodableHelper) -> ParameterField { .string(String(describing: self)) }
}

extension RawRepresentable where RawValue: ParameterConvertible {
    func asParameter(codableHelper: CodableHelper) -> ParameterField {
        return rawValue.asParameter(codableHelper: codableHelper)
    }
}

private func encodeIfPossible<T>(_ object: T, codableHelper: CodableHelper) -> ParameterField {
    if let encodableObject = object as? ParameterConvertible {
        return encodableObject.asParameter(codableHelper: codableHelper)
    } else {
        return .string(String(describing: object))
    }
}

extension Array: ParameterConvertible {
    func asParameter(codableHelper: CodableHelper) -> ParameterField {
        return .array(self.map { encodeIfPossible($0, codableHelper: codableHelper) })
    }
}

extension Set: ParameterConvertible {
    func asParameter(codableHelper: CodableHelper) -> ParameterField {
        return .array(self.map { encodeIfPossible($0, codableHelper: codableHelper) })
    }
}

extension Dictionary where Key: Sendable {
    func asParameter(codableHelper: CodableHelper) -> [Key: ParameterField] {
        var dictionary = [Key: ParameterField]()
        for (key, value) in self {
            dictionary[key] = encodeIfPossible(value, codableHelper: codableHelper)
        }
        return dictionary
    }
}

extension Data: ParameterConvertible {
    func asParameter(codableHelper: CodableHelper) -> ParameterField { .data(self) }
}

extension Date: ParameterConvertible {
    func asParameter(codableHelper: CodableHelper) -> ParameterField {
        return .string(codableHelper.dateFormatter.string(from: self))
    }
}

extension ParameterConvertible where Self: Encodable {
    func asParameter(codableHelper: CodableHelper) -> ParameterField {
        guard let data = try? codableHelper.jsonEncoder.encode(self) else {
            fatalError("Could not encode to json: \(self)")
        }
        return data.asParameter(codableHelper: codableHelper)
    }
}
